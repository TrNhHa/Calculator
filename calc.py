import tkinter as tk
from tkinter import messagebox, scrolledtext
import math

# L∆∞u l·ªãch s·ª≠ t√≠nh to√°n
calculation_history = []

def update_history(entry):
    calculation_history.append(entry)
    history_box.config(state='normal')
    history_box.insert(tk.END, entry + '\n')
    history_box.config(state='disabled')

def add():
    try:
        res = float(entry1.get()) + float(entry2.get())
        result.set(res)
        update_history(f"{entry1.get()} + {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

def subtract():
    try:
        res = float(entry1.get()) - float(entry2.get())
        result.set(res)
        update_history(f"{entry1.get()} - {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

def multiply():
    try:
        res = float(entry1.get()) * float(entry2.get())
        result.set(res)
        update_history(f"{entry1.get()} * {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

def divide():
    try:
        num2 = float(entry2.get())
        if num2 == 0:
            raise ZeroDivisionError
        res = float(entry1.get()) / num2
        result.set(res)
        update_history(f"{entry1.get()} / {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")
    except ZeroDivisionError:
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ chia cho 0.")

def power():
    try:
        res = float(entry1.get()) ** float(entry2.get())
        result.set(res)
        update_history(f"{entry1.get()} ^ {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

def square_root():
    try:
        num = float(entry1.get())
        if num < 0:
            raise ValueError
        res = math.sqrt(num)
        result.set(res)
        update_history(f"‚àö{entry1.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l·∫•y cƒÉn b·∫≠c hai c·ªßa s·ªë √¢m ho·∫∑c nh·∫≠p sai.")

def percentage():
    try:
        res = (float(entry1.get()) / 100) * float(entry2.get())
        result.set(res)
        update_history(f"{entry1.get()}% c·ªßa {entry2.get()} = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

def absolute_value():
    try:
        res = abs(float(entry1.get()))
        result.set(res)
        update_history(f"|{entry1.get()}| = {res}")
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")

# Giao di·ªán
root = tk.Tk()
root.title("üßÆ M√°y t√≠nh b·ªè t√∫i n√¢ng cao")
root.geometry("500x600")

tk.Label(root, text="S·ªë th·ª© nh·∫•t:").pack()
entry1 = tk.Entry(root)
entry1.pack()

tk.Label(root, text="S·ªë th·ª© hai:").pack()
entry2 = tk.Entry(root)
entry2.pack()

# K·∫øt qu·∫£
result = tk.StringVar()
tk.Label(root, text="K·∫øt qu·∫£:", font=('Arial', 12, 'bold')).pack(pady=5)
tk.Entry(root, textvariable=result, state='readonly').pack()

# C√°c n√∫t ch·ª©c nƒÉng
tk.Button(root, text="C·ªông", width=20, command=add).pack(pady=2)
tk.Button(root, text="Tr·ª´", width=20, command=subtract).pack(pady=2)
tk.Button(root, text="Nh√¢n", width=20, command=multiply).pack(pady=2)
tk.Button(root, text="Chia", width=20, command=divide).pack(pady=2)
tk.Button(root, text="L≈©y th·ª´a", width=20, command=power).pack(pady=2)
tk.Button(root, text="CƒÉn b·∫≠c hai (s·ªë 1)", width=25, command=square_root).pack(pady=2)
tk.Button(root, text="Ph·∫ßn trƒÉm (x% c·ªßa y)", width=25, command=percentage).pack(pady=2)
tk.Button(root, text="Gi√° tr·ªã tuy·ªát ƒë·ªëi (s·ªë 1)", width=25, command=absolute_value).pack(pady=2)

# L·ªãch s·ª≠ t√≠nh to√°n
tk.Label(root, text="üìú L·ªãch s·ª≠ t√≠nh to√°n:", font=('Arial', 12, 'bold')).pack(pady=5)
history_box = scrolledtext.ScrolledText(root, height=10, state='disabled', wrap='word')
history_box.pack(fill='both', expand=True, padx=10)

# Tho√°t
tk.Button(root, text="Tho√°t", width=15, command=root.quit).pack(pady=10)

root.mainloop()
